# This is the main configuration file for the application.
# ~~~~~
application.name=sparc-interview

application.baseUrl=${SERVER_URL}


numDynos=1
%prod.numDynos=${NUM_DYNOS}

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod

force.ssl=${FORCE_SSL}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=${SECRET}

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja

# Date format
# ~~~~~
date.format=yyyy-MM-dd
# date.format.fr=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
http.port=9001
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
# application.session.maxAge=1h
# application.session.secure=false

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
# java.source=1.6
%prod.jvm.memory=-Xmx256m -Xms128m -XX:MaxPermSize=128M
jvm.memory=-Xmx256m -Xms128m -XX:MaxPermSize=128M

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
# application.log=INFO
#
# More logging configuration
# application.log.path=/log4j.properties
# application.log.system.out=off


# Database configuration settings
# ~~~~~
# Default Settings apply to all modes (dev, prod, test, etc.)

# Production Settings also apply to all shared (heroku) instances
%prod.db=${DATABASE_URL}
%prod.evolutions.enabled=true
%prod.jpa.ddl=none

# Connections pool configuration
%prod.db.pool.timeout=3000
%prod.db.pool.maxSize=20
%prod.db.pool.minSize=5

# Standard dev settings using in-memory H2 database
db=mysql://root@localhost/sparcindevlocalcopy
evolutions.enabled=true
jpa.ddl=none

# Dev settings for a local MySQL database named suitedto - useful for testing out evolutions. This could also just be
# configured to use the jpa.ddl create-drop or update if so desired
# db=mysql://root@localhost/suitedto
# evolutions.enabled=true
#jpa.ddl=none
# ~~~~~


# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
%test.jpa.dialect=org.hibernate.dialect.MySQLDialect
jpa.dialect=db.dialect.CustomMySql5Dialect
#
# Specify the ddl generation pattern to use. Set to none to disable it
# (default to update in DEV mode, and none in PROD mode):
# jpa.ddl=update
#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true


hibernate.cache.provider_class=cache.HibernateCacheProvider
hibernate.cache.use_query_cache=true
hibernate.cache.use_second_level_cache=true
hibernate.memcached.cacheTimeSeconds=300
hibernate.memcached.connectionFactory=BinaryConnectionFactory
hibernate.memcached.servers=${MEMCACHIER_SERVERS}
hibernate.memcached.username=${MEMCACHIER_USERNAME}
hibernate.memcached.password=${MEMCACHIER_PASSWORD}

#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~
# Enable memcached if needed. Otherwise a local cache is used. The memcached setting is checked against a system
# property called MEMCACHED_ENABLED if this value is set to "enabled" then memcached will be used if it is not set
# or set to something other than "enabled" then memcached will not be used.
memcached=${MEMCACHE_ENABLED}
memcached.host=${MEMCACHIER_SERVERS}
memcached.user=${MEMCACHIER_USERNAME}
memcached.password=${MEMCACHIER_PASSWORD}

# Below is the typical configuration for running against a local memcached installaction
# memcached=enabled
# memcached.host=127.0.0.1:11211


# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~
# Default is to use a mock Mailer
mail.smtp=mock

# Or, specify mail host configuration
%prod.mail.smtp.host=smtp.sendgrid.net
%prod.mail.smtp.port=587
%prod.mail.smtp.user=${SENDGRID_USERNAME}
%prod.mail.smtp.pass=${SENDGRID_PASSWORD}

# Hooking up the right subdomain and thus MX Record
# to point sendgrid at SuitedTo.
%prod.mail.replyToAddressDomain=${REPLYTOADDRESSDOMAIN}
mail.replyToAddressDomain=instaging.sparcin.com

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura
%test.application.mode=dev
%test.db.url=jdbc:h2:mem:play;MODE=MYSQL;LOCK_MODE=0
%test.jpa.ddl=create
%test.mail.smtp=mock


#Custom application properties
default.query.max=10
deadbolt.handler=controllers.MyDeadboltHandler

score.standard.rating.weight=1
score.standard.interviews.weight=2

score.interview.userRatedUp.weight=50
score.interview.userRatedDown.weight=1000
score.interview.coworkerRating.weight=5
score.interview.nonCoworkerRating.weight=1
score.interview.interviews.weight=2
score.interview.coworkerCreated.weight=100

#Default customer timezone
default.timezone=America/New_York

dataTable.processing=server
#dataTable.processing=client

statusRecipients=test@test.com

static.page.LEGAL_DISCLAIMER=http://www.suitedto.com/lega/disclaimer

#Setting this in the environment will cause basic authentication to be required before accessing the site. useful for
#public-facing dev or testing environments
basicAuth.password=${BASIC_AUTH_PASSWORD}

# dev mode indicates that a given environment is NOT a production environment. This can be used to toggle feature
# visibility that is in the source repository and needed in local and shared development environments but is not yet
# able to be enabled in the production environment.
%prod.dev_mode=${DEV_MODE}
dev_mode=true

# Settings for displaying on-screen application information. The ${DISPLAY_APP_INFO} string will be replaced by an
# environment configuration of the same name if present. Any non-null value for this configuration will cause the
# application information to be displayed in the app. The included build-info.conf is typically only modified by the
# Continuous integration servers and contains pertinent build information to display in the app.
# ~~~~~
displayAppInfo=${DISPLAY_APP_INFO}
@include.build=build-info.conf

#Configurations for 3rd party services such as Amazon Web Services or Stripe Payments
@include.aws=aws.conf
@include.stripe=stripe.conf

@include.streetCred=streetCred.conf

@include.quizes=quizes.conf

@include.social=social.conf

@include.newsFeed=newsFeed.conf

@include.reviewerCriteria=reviewerCriteria.conf

@include.prep=prep.conf

@include.ebean=ebean.conf

@include.analytics=analytics.conf

#cron jobs
#http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger

#1 am
cron.InterviewReminder=0 0 1 * * ?